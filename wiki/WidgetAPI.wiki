#summary The Widget API documentation.
#labels Featured,Phase-Design

= Overview =
The Widget class consists of 2 set API methods:
  * `abstract` methods must be implemented by subclass
  * optional methods that have default implementation and may override by subclass

You can view the latest implementation of [http://code.google.com/p/grails-form-builder-plugin/source/browse/trunk/src/groovy/org/grails/formbuilder/widget/Widget.groovy Widget] class and it's subclasses such as [http://code.google.com/p/grails-form-builder-plugin/source/browse/trunk/src/groovy/org/grails/formbuilder/widget/PlainText.groovy PlainText] and [http://code.google.com/p/grails-form-builder-plugin/source/browse/trunk/src/groovy/org/grails/formbuilder/widget/SingleLineText.groovy SingleLineText] for reference.

== API methods MUST implement by subclass ==
<table border="1">
<tr>
<th>API</th><th>Description</th>
</tr>
<tr>
<td valign="top">
{{{
String getWidgetTemplateText(
  String name, 
  Object settings,
  Locale locale, 
  FormDesignerView formDesignerView
)
}}}
</td>
<td>
Return template text of the widget.

*Arguments:*
  * *name:* Field name from `Field.name` property.
  * *settings:* JSON object from `Field.settings` property (created by `JSON.parse(field.settings)`).
  * *locate:* locale of current request.
  * *formDesignerView*: If invoked by `FormViewerTemplateService`, it is null. Otherwise, invoked by `FormTemplateService`, the value can be `FormDesignerView.CREATE`, `FormDesignerView.EDIT` or `FormDesignerView.SHOW`. Please see the latest implementation of [http://code.google.com/p/grails-form-builder-plugin/source/browse/trunk/src/groovy/org/grails/formbuilder/FormDesignerView.groovy FormDesignerView enum class].
</td>
</tr>
<tr>
<td valign="top">
{{{
String getWidgetReadOnlyTemplateText(
  String name, 
  Object settings,
  Locale locale, 
  FormDesignerView formDesignerView
)
}}}
</td>
<td>
Return template text of read only state of the widget. Use by show view of the Form Viewer.

*Arguments:*
  * Same with `getWidgetTemplateText()` above.
</td>
</tr>
</table>

== API methods MAY implement by subclass ==
<table border="1">
<tr>
<th>API</th><th>Description</th>
</tr>
<tr>
<td valign="top">
{{{
String getFieldClasses(
  Object settings, 
  Locale locale
)
}}}
</td>
<td>
Return class string that will be append to class attribute of `<div class="ctrlHolder">` such as `<div class="ctrlHolder topAlign">`.

*Arguments:*
  * *settings:* JSON object from `Field.settings` property (created by `JSON.parse(field.settings)`).
  * *locate:* locale of current request.
</td>
</tr>
<tr>
<td valign="top">
{{{
String getFieldStyles(
  Object settings, 
  Locale locale
)
}}}
</td>
<td>
Return style string that will be append to style attribute of `<div class="ctrlHolder">` such as `<div class="ctrlHolder topAlign" style="color: #ffffff; background-color: #000000;">`.

*Arguments:*
  * *settings:* JSON object from `Field.settings` property (created by `JSON.parse(field.settings)`).
  * *locate:* locale of current request.
</td>
</tr>
<tr>
<td valign="top">
{{{
String getFieldConstraints(
  Object settings
)
}}}
</td>
<td>
Return constraints string of the field/property to be included in the generated domain class. Persistent field such as Single Line Text _shall_ override this method.

*Arguments:*
  * *settings:* JSON object from `Field.settings` property (created by `JSON.parse(field.settings)`).
</td>
</tr>
<tr>
<td valign="top">
{{{
Object getFieldValue(
  Object settings, 
  Locale locale
)
}}}
</td>
<td>
Return default value of the field/property.

*Arguments:*
  * *settings:* JSON object from `Field.settings` property (created by `JSON.parse(field.settings)`).
  * *locate:* locale of current request.
</td>
</tr>
</table>